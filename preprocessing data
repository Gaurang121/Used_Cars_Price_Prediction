import pandas as pd
import matplotlib.pylab as plt
import numpy as np

#We are going to use the same dataset which was used in the previous lab and was saved as "automobile.csv".

df=pd.read_csv("automobile.csv")
df.head(10)

missing_data=df.isnull()
missing_data.head(10)

#Counting the number of missing values in each column
#using the for loop.

for column in missing_data.columns.values.tolist():
    print(column)
    print (missing_data[column].value_counts())
    print("")    

avg_norm_loss = df["normalized-losses"].astype("float").mean(axis=0)
print("Average of normalized-losses:", avg_norm_loss)

#Replacing the "NaN" values with the mean value in Normalized-losses

df["normalized-losses"].replace(np.nan, avg_norm_loss,inplace=True)
df["normalized-losses"].head(3)

avg_bore=df['bore'].astype('float').mean(axis=0)
print("Average of bore:", avg_bore)

#Replacing the "NaN" values with the mean value in Bore-column

df["bore"].replace(np.nan,avg_bore,inplace=True)
df.head(3)

avg_stroke_column=df["stroke"].astype("float").mean(axis=0)
print("Average of stroke column :",avg_stroke_column)

#Repalcing the missing values of Stroke column with the mean value

df["stroke"].replace(np.nan,avg_stroke_column,inplace=True)
df["stroke"].head(3)

avg_horsepower = df['horsepower'].astype('float').mean(axis=0)
print("Average horsepower:", avg_horsepower)

#Replacing the missing values of the HorsePwer Column with the mean value

df['horsepower'].replace(np.nan, avg_horsepower, inplace=True)
df['horsepower'].head(3)

avg_peakrpm=df['peak-rpm'].astype('float').mean(axis=0)
print("Average peak rpm:", avg_peakrpm)

#Replacing the missing values of the PeakRpm Column with the mean value

df['peak-rpm'].replace(np.nan, avg_peakrpm, inplace=True)
df["peak-rpm"].head(3)

#To see which values are present in a particular column, we can use the ".value_counts()" method:

df['num-of-doors'].value_counts()

#You can see that four doors is the most common type. We can also use the ".idxmax()" method to calculate the most common type automatically:

df['num-of-doors'].value_counts().idxmax()

#replace the missing 'num-of-doors' values by the most frequent 
df["num-of-doors"].replace(np.nan, "four", inplace=True)
df["num-of-doors"].head(3)

#Finally, drop all rows that do not have price data:

df.dropna(subset=["price"],axis=0,inplace=True)

# reset index, because we dropped two rows
df.reset_index(drop=True, inplace=True)

df.head()
df.dtypes

#Now, we have a data set with no missing values.


#Converting data types in proper format

df[["bore", "stroke"]] = df[["bore", "stroke"]].astype("float")
df[["normalized-losses"]] = df[["normalized-losses"]].astype("int")
df[["price"]] = df[["price"]].astype("float")
df[["peak-rpm"]] = df[["peak-rpm"]].astype("float")

df.dtypes

#Now you finally obtained the cleansed data set with no missing values and with all data in its proper format.

#Data Standardization

# Convert mpg to L/100km by mathematical operation (235 divided by mpg)
df['city-L/100km'] = 235/df["city-mpg"]

# check your transformed data 
df.head()

# transform mpg to L/100km by mathematical operation (235 divided by mpg)
df["highway-mpg"] = 235/df["highway-mpg"]

# rename column name from "highway-mpg" to "highway-L/100km"
df.rename(columns={'"highway-mpg"':'highway-L/100km'}, inplace=True)

# check your transformed data 
df.head()

#DATA Normalization
#We are going to be using the simple feature scaling technique of Normalization
# replace (original value) by (original value)/(maximum value)

df["length"]=df["length"]/df["length"].max()
df["length"].head(3)
df['width'] = df['width']/df['width'].max()
df["width"].head(3)
df['height'] = df['height']/df['height'].max() 
# show the scaled columns
df[["length","width","height"]].head()

#Here you've normalized "length", "width" and "height" to fall in the range of [0,1].

#DATA BINNING

df["horsepower"]=df["horsepower"].astype(int, copy=True)
%matplotlib inline
import matplotlib as plt
from matplotlib import pyplot
plt.pyplot.hist(df["horsepower"])

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")

bins = np.linspace(min(df["horsepower"]), max(df["horsepower"]), 4)
bins
group_names = ['Low', 'Medium', 'High']
df['horsepower-binned'] = pd.cut(df['horsepower'], bins, labels=group_names, include_lowest=True )
df[['horsepower','horsepower-binned']].head(20)

df["horsepower-binned"].value_counts()
%matplotlib inline
import matplotlib as plt
from matplotlib import pyplot
pyplot.bar(group_names, df["horsepower-binned"].value_counts())

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")

%matplotlib inline
import matplotlib as plt
from matplotlib import pyplot


# draw historgram of attribute "horsepower" with bins = 3
plt.pyplot.hist(df["horsepower"], bins = 3)

# set x/y labels and plot title
plt.pyplot.xlabel("horsepower")
plt.pyplot.ylabel("count")
plt.pyplot.title("horsepower bins")

#Indicator variable

df.columns
dummy_variable_1 = pd.get_dummies(df["fuel-type"])
dummy_variable_1.head()
#changng the column names for clarity
dummy_variable_1.rename(columns={'gas':'fuel-type-gas', 'diesel':'fuel-type-diesel'}, inplace=True)
dummy_variable_1.head()

# merge data frame "df" and "dummy_variable_1" 
df = pd.concat([df, dummy_variable_1], axis=1)

# drop original column "fuel-type" from "df"
df.drop("fuel-type", axis = 1, inplace=True)
df.head()

# get indicator variables of aspiration and assign it to data frame "dummy_variable_2"
dummy_variable_2 = pd.get_dummies(df['aspiration'])

# change column names for clarity
dummy_variable_2.rename(columns={'std':'aspiration-std', 'turbo': 'aspiration-turbo'}, inplace=True)

# show first 5 instances of data frame "dummy_variable_1"
dummy_variable_2.head()

# merge the new dataframe to the original datafram
df = pd.concat([df, dummy_variable_2], axis=1)

# drop original column "aspiration" from "df"
df.drop('aspiration', axis = 1, inplace=True)


#Now we have completed the task of Data Wrangling and can save the file in the csv format
df.to_csv('clean_df_auto.csv')




